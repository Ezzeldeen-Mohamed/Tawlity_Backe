// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tawlity_Backend.Data;

#nullable disable

namespace Tawlity_Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tawlity_Backend.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MenuItemImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Delicious pasta",
                            MenuItemImage = "https://www.google.com/imgres?q=Delicious%20pasta&imgurl=https%3A%2F%2Fae-parenting.s3.ap-south-1.amazonaws.com%2F2018%2F04%2F275882210-H.jpg&imgrefurl=https%3A%2F%2Fparenting.firstcry.ae%2Farticles%2F15-easy-and-yummy-pasta-recipe-for-kids%2F&docid=c9nOAPHejMHBxM&tbnid=hzqvpSwLRDpBrM&vet=12ahUKEwjPiKOzkdCLAxU3BNsEHbcSBjwQM3oECH8QAA..i&w=1024&h=700&hcb=2&ved=2ahUKEwjPiKOzkdCLAxU3BNsEHbcSBjwQM3oECH8QAA",
                            Name = "Pasta",
                            Price = 50m,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Tasty pizza",
                            MenuItemImage = "https://www.google.com/imgres?q=Tasty%20pizza&imgurl=https%3A%2F%2Fmedia.istockphoto.com%2Fid%2F938742222%2Fphoto%2Fcheesy-pepperoni-pizza.jpg%3Fs%3D612x612%26w%3D0%26k%3D20%26c%3DD1z4xPCs-qQIZyUqRcHrnsJSJy_YbUD9udOrXpilNpI%3D&imgrefurl=https%3A%2F%2Fwww.istockphoto.com%2Fphotos%2Ftasty-pizza-close-up&docid=OXpXwXDjbStycM&tbnid=FbKDrRBh9q9x0M&vet=12ahUKEwjCpbLBkdCLAxUecvEDHfRPGikQM3oECBYQAA..i&w=612&h=459&hcb=2&ved=2ahUKEwjCpbLBkdCLAxUecvEDHfRPGikQM3oECBYQAA",
                            Name = "Pizza",
                            Price = 100m,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Juicy burger",
                            MenuItemImage = "https://www.google.com/imgres?q=Juicy%20burger&imgurl=https%3A%2F%2Fbutchershopinc.com%2Fwp-content%2Fuploads%2F2024%2F05%2Fjuicy-grilled-burgers-scaled.jpeg&imgrefurl=https%3A%2F%2Fbutchershopinc.com%2F2024%2F05%2Fjuicy-grilled-burgers%2F&docid=5YiZMoYl5gUdmM&tbnid=27V3YW0aANLAHM&vet=12ahUKEwjC8P3RkdCLAxU7SPEDHZtfFNMQM3oECFYQAA..i&w=2560&h=1707&hcb=2&ved=2ahUKEwjC8P3RkdCLAxU7SPEDHZtfFNMQM3oECFYQAA",
                            Name = "Burger",
                            Price = 80m,
                            RestaurantId = 2
                        },
                        new
                        {
                            Id = 4,
                            Description = "Fresh salad",
                            MenuItemImage = "https://www.google.com/imgres?q=Fresh%20salad&imgurl=https%3A%2F%2Fimages.immediate.co.uk%2Fproduction%2Fvolatile%2Fsites%2F30%2F2014%2F05%2FEpic-summer-salad-hub-2646e6e.jpg&imgrefurl=https%3A%2F%2Fwww.bbcgoodfood.com%2Frecipes%2Fcollection%2Fsalad-recipes&docid=-1YYOjHeqWR61M&tbnid=_6L-FTqnPgAEEM&vet=12ahUKEwjKwJLhkdCLAxWrB9sEHftBB0IQM3oECFQQAA..i&w=3384&h=3076&hcb=2&ved=2ahUKEwjKwJLhkdCLAxWrB9sEHftBB0IQM3oECFQQAA",
                            Name = "Salad",
                            Price = 30m,
                            RestaurantId = 3
                        },
                        new
                        {
                            Id = 5,
                            Description = "Grilled steak",
                            MenuItemImage = "https://www.google.com/imgres?q=Grilled%20steak&imgurl=https%3A%2F%2Fiowagirleats.com%2Fwp-content%2Fuploads%2F2024%2F09%2FPerfect-Grilled-Steak-with-Herb-Butter-iowagirleats-Featured-1200x2-1.jpg&imgrefurl=https%3A%2F%2Fiowagirleats.com%2Fperfect-grilled-steak-with-herb-butter%2F&docid=XxM3xR2x5reS0M&tbnid=NuVWbgW4OnxeTM&vet=12ahUKEwivjbvvkdCLAxVzR_EDHdrEMTgQM3oECGUQAA..i&w=1200&h=1200&hcb=2&ved=2ahUKEwivjbvvkdCLAxVzR_EDHdrEMTgQM3oECGUQAA",
                            Name = "Steak",
                            Price = 200m,
                            RestaurantId = 4
                        },
                        new
                        {
                            Id = 6,
                            Description = "Hot soup",
                            MenuItemImage = "https://www.google.com/imgres?q=Hot%20soup&imgurl=https%3A%2F%2Fwww.chilitochoc.com%2Fwp-content%2Fuploads%2F2021%2F01%2Fchinese-hot-and-sour-soup-sq.jpg&imgrefurl=https%3A%2F%2Fwww.chilitochoc.com%2Fchinese-hot-and-sour-soup%2F&docid=zJN6OgQdVbrmDM&tbnid=MIF6fOIFDFKlqM&vet=12ahUKEwiT17OBktCLAxXUX_EDHV0RAjoQM3oECBwQAA..i&w=1141&h=1141&hcb=2&ved=2ahUKEwiT17OBktCLAxXUX_EDHV0RAjoQM3oECBwQAA",
                            Name = "Soup",
                            Price = 25m,
                            RestaurantId = 5
                        });
                });

            modelBuilder.Entity("Tawlity_Backend.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("ReservationId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Tawlity_Backend.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Tawlity_Backend.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PeopleCount")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ReservationDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("ReservationTime")
                        .HasColumnType("time");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("TableId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PeopleCount = 2,
                            ReservationDate = new DateOnly(2025, 3, 10),
                            ReservationTime = new TimeOnly(19, 0, 0),
                            RestaurantId = 1,
                            Status = 2,
                            TableId = 1,
                            UserId = 4
                        },
                        new
                        {
                            Id = 2,
                            PeopleCount = 4,
                            ReservationDate = new DateOnly(2025, 4, 15),
                            ReservationTime = new TimeOnly(20, 30, 0),
                            RestaurantId = 2,
                            Status = 1,
                            TableId = 2,
                            UserId = 5
                        },
                        new
                        {
                            Id = 3,
                            PeopleCount = 6,
                            ReservationDate = new DateOnly(2025, 5, 5),
                            ReservationTime = new TimeOnly(18, 0, 0),
                            RestaurantId = 3,
                            Status = 2,
                            TableId = 3,
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            PeopleCount = 8,
                            ReservationDate = new DateOnly(2025, 6, 20),
                            ReservationTime = new TimeOnly(21, 45, 0),
                            RestaurantId = 4,
                            Status = 3,
                            TableId = 4,
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            PeopleCount = 3,
                            ReservationDate = new DateOnly(2025, 7, 7),
                            ReservationTime = new TimeOnly(17, 30, 0),
                            RestaurantId = 5,
                            Status = 1,
                            TableId = 5,
                            UserId = 4
                        },
                        new
                        {
                            Id = 6,
                            PeopleCount = 5,
                            ReservationDate = new DateOnly(2025, 8, 12),
                            ReservationTime = new TimeOnly(22, 0, 0),
                            RestaurantId = 6,
                            Status = 2,
                            TableId = 6,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("Tawlity_Backend.Models.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Cairo",
                            Description = "This restaurant is very nice to to use for every one.",
                            Latitude = 30.0444,
                            Longitude = 39.235700000000001,
                            Name = "Tawlity Restaurant1",
                            Phone = "01147790490",
                            RestaurantImage = "https://www.google.com/imgres?q=restaurants&imgurl=https%3A%2F%2Fcdn.vox-cdn.com%2Fuploads%2Fchorus_image%2Fimage%2F62582192%2FIMG_2025.280.jpg&imgrefurl=https%3A%2F%2Fsandiego.eater.com%2Fmaps%2F38-best-restaurants-san-diego-california&docid=q8YKW0oQDtjkVM&tbnid=AARg1jNdAWZT6M&vet=12ahUKEwiNkabvj9CLAxWiQ_EDHRyhHmIQM3oECHMQAA..i&w=6240&h=4160&hcb=2&ved=2ahUKEwiNkabvj9CLAxWiQ_EDHRyhHmIQM3oECHMQAA",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "Tanta",
                            Description = "This restaurant is very nice to to use for every one.",
                            Latitude = 35.045400000000001,
                            Longitude = 38.235700000000001,
                            Name = "Restaurant2",
                            Phone = "01147790498",
                            RestaurantImage = "https://www.google.com/imgres?q=restaurants&imgurl=https%3A%2F%2Fwinecountry-media.s3.amazonaws.com%2Fwp-content%2Fuploads%2Fsites%2F4%2F2024%2F07%2F11110433%2Fshutterstock_1678594945-1880x880-1.jpg&imgrefurl=https%3A%2F%2Fwww.napavalley.com%2Fblog%2Fbest-restaurants-in-napa-valley%2F&docid=UzoJ77pi4QAAtM&tbnid=RsFv41nJx8e2LM&vet=12ahUKEwiNkabvj9CLAxWiQ_EDHRyhHmIQM3oECB0QAA..i&w=1880&h=880&hcb=2&ved=2ahUKEwiNkabvj9CLAxWiQ_EDHRyhHmIQM3oECB0QAA",
                            UserId = 4
                        },
                        new
                        {
                            Id = 3,
                            Address = "Banha",
                            Description = "This restaurant is very nice to to use for every one.",
                            Latitude = 20.064399999999999,
                            Longitude = 61.435699999999997,
                            Name = "Restaurant3",
                            Phone = "01147790465",
                            RestaurantImage = "https://www.google.com/imgres?q=restaurants&imgurl=https%3A%2F%2Fmedia.cntraveler.com%2Fphotos%2F654bd5e13892537a8ded0947%2F16%3A9%2Fw_2560%252Cc_limit%2Fphy2023.din.oss.restaurant-lr.jpg&imgrefurl=https%3A%2F%2Fwww.cntraveler.com%2Fstory%2Fbest-dubai-restaurants&docid=wZqceSbkuJPClM&tbnid=AvpLM5IF-eEjLM&vet=12ahUKEwiNkabvj9CLAxWiQ_EDHRyhHmIQM3oECFcQAA..i&w=2560&h=1440&hcb=2&ved=2ahUKEwiNkabvj9CLAxWiQ_EDHRyhHmIQM3oECFcQAA",
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            Address = "Alex",
                            Description = "This restaurant is very nice to to use for every one.",
                            Latitude = 44.044400000000003,
                            Longitude = 21.235700000000001,
                            Name = "Restaurant4",
                            Phone = "01147790488",
                            RestaurantImage = "https://www.google.com/imgres?q=restaurants&imgurl=https%3A%2F%2Fimages.axios.com%2FwATq4W23ahtn_smTbli4sm0yPnM%3D%2F0x73%3A1300x804%2F1920x1080%2F2024%2F07%2F18%2F1721312331120.jpg%3Fw%3D3840&imgrefurl=https%3A%2F%2Fwww.axios.com%2Flocal%2Fcharlotte%2F2024%2F07%2F19%2Fbest-restaurants-charlotte-2024&docid=p0q79u4kU0Cg2M&tbnid=nfEMMyUQUPvlKM&vet=12ahUKEwiNkabvj9CLAxWiQ_EDHRyhHmIQM3oECB4QAA..i&w=1920&h=1080&hcb=2&ved=2ahUKEwiNkabvj9CLAxWiQ_EDHRyhHmIQM3oECB4QAA",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            Address = "Giza",
                            Description = "This restaurant is very nice to to use for every one.",
                            Latitude = 10.0444,
                            Longitude = 35.235700000000001,
                            Name = "Restaurant5",
                            Phone = "01147790467",
                            RestaurantImage = "https://www.google.com/imgres?q=restaurants&imgurl=https%3A%2F%2Fwinecountry-media.s3.amazonaws.com%2Fwp-content%2Fuploads%2Fsites%2F4%2F2024%2F07%2F11110433%2Fshutterstock_1678594945-1880x880-1.jpg&imgrefurl=https%3A%2F%2Fwww.napavalley.com%2Fblog%2Fbest-restaurants-in-napa-valley%2F&docid=UzoJ77pi4QAAtM&tbnid=RsFv41nJx8e2LM&vet=12ahUKEwiNkabvj9CLAxWiQ_EDHRyhHmIQM3oECB0QAA..i&w=1880&h=880&hcb=2&ved=2ahUKEwiNkabvj9CLAxWiQ_EDHRyhHmIQM3oECB0QAA",
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            Address = "Luxor",
                            Description = "This restaurant is very nice to to use for every one.",
                            Latitude = 12.1234,
                            Longitude = 32.567799999999998,
                            Name = "Restaurant6",
                            Phone = "01147790468",
                            RestaurantImage = "https://www.google.com/imgres?q=restaurants&imgurl=https%3A%2F%2Fdynamic-media-cdn.tripadvisor.com%2Fmedia%2Fphoto-o%2F2a%2F24%2Fb1%2F8f%2Fview-from-sky-deck.jpg%3Fw%3D600%26h%3D-1%26s%3D1&imgrefurl=https%3A%2F%2Fwww.tripadvisor.com%2FRestaurants-g298573-Manila_Metro_Manila_Luzon.html&docid=r3rbGpE1VVSxAM&tbnid=oQTnJncwVo5mnM&vet=12ahUKEwiNkabvj9CLAxWiQ_EDHRyhHmIQM3oECFUQAA..i&w=600&h=400&hcb=2&ved=2ahUKEwiNkabvj9CLAxWiQ_EDHRyhHmIQM3oECFUQAA",
                            UserId = 5
                        });
                });

            modelBuilder.Entity("Tawlity_Backend.Models.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 4,
                            ImageUrl = "table1.jpg",
                            Name = "Table1",
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 6,
                            ImageUrl = "table2.jpg",
                            Name = "Table2",
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 2,
                            ImageUrl = "table3.jpg",
                            Name = "Table3",
                            RestaurantId = 2
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 8,
                            ImageUrl = "table4.jpg",
                            Name = "Table4",
                            RestaurantId = 3
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 10,
                            ImageUrl = "table5.jpg",
                            Name = "Table5",
                            RestaurantId = 4
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 12,
                            ImageUrl = "table6.jpg",
                            Name = "Table6",
                            RestaurantId = 5
                        });
                });

            modelBuilder.Entity("Tawlity_Backend.Models.User", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<int>("EmployeeCity")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCreditCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeGender")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("EmployeePassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Employee_Role")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 4,
                            EmployeeCity = 0,
                            EmployeeConfirmPassword = "Ezz1234#",
                            EmployeeCreditCard = "1234567812345678",
                            EmployeeEmail = "admin@gmail.com",
                            EmployeeGender = 0,
                            EmployeeName = "Admin",
                            EmployeePassword = "Ezz1234#",
                            EmployeePhone = "01234567890",
                            Employee_Role = 2,
                            PasswordHash = "",
                            ResetToken = "",
                            ResetTokenExpiry = new DateTime(2025, 3, 10, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeId = 5,
                            EmployeeCity = 1,
                            EmployeeConfirmPassword = "Ezz1234#",
                            EmployeeCreditCard = "2345678923456789",
                            EmployeeEmail = "owner@example.com",
                            EmployeeGender = 1,
                            EmployeeName = "Restaurant Owner",
                            EmployeePassword = "Ezz1234#",
                            EmployeePhone = "01234567891",
                            Employee_Role = 3,
                            PasswordHash = "",
                            ResetToken = "",
                            ResetTokenExpiry = new DateTime(2025, 3, 10, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeId = 6,
                            EmployeeCity = 2,
                            EmployeeConfirmPassword = "Ezz1234#",
                            EmployeeCreditCard = "3456789034567890",
                            EmployeeEmail = "john@example.com",
                            EmployeeGender = 0,
                            EmployeeName = "John Doe",
                            EmployeePassword = "Ezz1234#",
                            EmployeePhone = "01234567892",
                            Employee_Role = 1,
                            PasswordHash = "",
                            ResetToken = "",
                            ResetTokenExpiry = new DateTime(2025, 3, 10, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeId = 1,
                            EmployeeCity = 0,
                            EmployeeConfirmPassword = "4HMqQ3k88d+UXom+uWf3UNrFF9YdgyJkRbg/sTnXrtQ=",
                            EmployeeCreditCard = "1234567812345678",
                            EmployeeEmail = "ezzm80618@gmail.com",
                            EmployeeGender = 0,
                            EmployeeName = "Ezzeldeen Mohamed",
                            EmployeePassword = "4HMqQ3k88d+UXom+uWf3UNrFF9YdgyJkRbg/sTnXrtQ=",
                            EmployeePhone = "01234567890",
                            Employee_Role = 2,
                            PasswordHash = "",
                            ResetToken = "",
                            ResetTokenExpiry = new DateTime(2025, 3, 10, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeId = 2,
                            EmployeeCity = 1,
                            EmployeeConfirmPassword = "Password@123",
                            EmployeeCreditCard = "2345678923456789",
                            EmployeeEmail = "fatma.ahmed@example.com",
                            EmployeeGender = 1,
                            EmployeeName = "Fatma Ahmed",
                            EmployeePassword = "Password@123",
                            EmployeePhone = "01234567891",
                            Employee_Role = 1,
                            PasswordHash = "",
                            ResetToken = "",
                            ResetTokenExpiry = new DateTime(2025, 3, 10, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeId = 3,
                            EmployeeCity = 0,
                            EmployeeConfirmPassword = "4HMqQ3k88d+UXom+uWf3UNrFF9YdgyJkRbg/sTnXrtQ=",
                            EmployeeCreditCard = "2345678923456789",
                            EmployeeEmail = "ezzedeen.0522029@gmail.com",
                            EmployeeGender = 0,
                            EmployeeName = "Ezzeldeen",
                            EmployeePassword = "4HMqQ3k88d+UXom+uWf3UNrFF9YdgyJkRbg/sTnXrtQ=",
                            EmployeePhone = "01234567891",
                            Employee_Role = 1,
                            PasswordHash = "",
                            ResetToken = "",
                            ResetTokenExpiry = new DateTime(2025, 3, 10, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Tawlity_Backend.Models.MenuItem", b =>
                {
                    b.HasOne("Tawlity_Backend.Models.Restaurant", "Restaurant")
                        .WithMany("MenuItems")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Tawlity_Backend.Models.OrderItem", b =>
                {
                    b.HasOne("Tawlity_Backend.Models.MenuItem", "MenuItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tawlity_Backend.Models.Reservation", "Reservation")
                        .WithMany("OrderItems")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Tawlity_Backend.Models.Payment", b =>
                {
                    b.HasOne("Tawlity_Backend.Models.Restaurant", "Restaurant")
                        .WithMany("Payments")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tawlity_Backend.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tawlity_Backend.Models.Reservation", b =>
                {
                    b.HasOne("Tawlity_Backend.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tawlity_Backend.Models.Table", "Table")
                        .WithMany("Reservations")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tawlity_Backend.Models.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("Table");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tawlity_Backend.Models.Restaurant", b =>
                {
                    b.HasOne("Tawlity_Backend.Models.User", "User")
                        .WithMany("Restaurants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tawlity_Backend.Models.Table", b =>
                {
                    b.HasOne("Tawlity_Backend.Models.Restaurant", "Restaurant")
                        .WithMany("Tables")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Tawlity_Backend.Models.MenuItem", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Tawlity_Backend.Models.Reservation", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Tawlity_Backend.Models.Restaurant", b =>
                {
                    b.Navigation("MenuItems");

                    b.Navigation("Payments");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("Tawlity_Backend.Models.Table", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Tawlity_Backend.Models.User", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Reservations");

                    b.Navigation("Restaurants");
                });
#pragma warning restore 612, 618
        }
    }
}
